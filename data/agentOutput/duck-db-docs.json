{
  "url": "https://duckdb.org/docs/api/nodejs/overview.html",
  "writePath": "/Users/ravix/Documents/projects/yt/1brc-poc/1brc-electron/data/agentOutput/duck-db-docs.json",
  "title": "Node.js API - DuckDB",
  "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\nDocumentation\n\n\n\n     \n\n\n\n\n  Installation   \n\n\n\n  How-To Guides   \n\n\n\n  Data Import   \n\n\n\n  Client APIs   \n\n\n\n  SQL   \n\n\n\n  Why DuckDB   \n\n\n\n  Media   \n\n\n\n  FAQ   \n\n\n\n\n\n  \n\n\n\n\n\n\nBlog\n\n\n\n   \n\n\n\n\n\n\n\n\n\nGitHub 13.7k  \n\n\n   \n\n\n\n\n\n\n\n\n\nSupport \n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Installation   \n\n\n\n\n\n\n\n\n\n    Guides  \n\n\n\n\n\n  Overview   \n\n\n\n    Data Import & Export  \n\n\n\n\n\n  CSV Import \n\n\n\n\n\n\n  CSV Export \n\n\n\n\n\n\n  Parquet Import \n\n\n\n\n\n\n  Parquet Export \n\n\n\n\n\n\n  Querying Parquet Files \n\n\n\n\n\n\n  HTTP Parquet Import \n\n\n\n\n\n\n  S3 Parquet Import \n\n\n\n\n\n\n  S3 Parquet Export \n\n\n\n\n\n\n  S3 Iceberg Import \n\n\n\n\n\n\n  JSON Import \n\n\n\n\n\n\n  JSON Export \n\n\n\n\n\n\n  Excel Import \n\n\n\n\n\n\n  Excel Export \n\n\n\n\n\n\n  MySQL Import \n\n\n\n\n\n\n  PostgreSQL Import \n\n\n\n\n\n\n  SQLite Import \n\n\n\n\n\n\n\n\n    Performance  \n\n\n\n\n\n  Overview \n\n\n\n\n\n\n  Schema \n\n\n\n\n\n\n  Indexing \n\n\n\n\n\n\n  Environment \n\n\n\n\n\n\n  File Formats \n\n\n\n\n\n\n  How to Tune Workloads \n\n\n\n\n\n\n  My Workload Is Slow \n\n\n\n\n\n\n  Benchmarks \n\n\n\n\n\n\n\n\n    Meta Queries  \n\n\n\n\n\n  Describe Table \n\n\n\n\n\n\n  Inspect Query Plan \n\n\n\n\n\n\n  List Tables \n\n\n\n\n\n\n  Profile Queries \n\n\n\n\n\n\n  Summarize \n\n\n\n\n\n\n  DuckDB Environment \n\n\n\n\n\n\n\n\n    ODBC  \n\n\n\n\n\n  ODBC Application \n\n\n\n\n\n\n\n\n    Python  \n\n\n\n\n\n  Installation \n\n\n\n\n\n\n  Execution SQL \n\n\n\n\n\n\n  Jupyter Notebooks \n\n\n\n\n\n\n  SQL on Pandas \n\n\n\n\n\n\n  Import from Pandas \n\n\n\n\n\n\n  Export to Pandas \n\n\n\n\n\n\n  SQL on Arrow \n\n\n\n\n\n\n  Import from Arrow \n\n\n\n\n\n\n  Export to Arrow \n\n\n\n\n\n\n  Relational API on Pandas \n\n\n\n\n\n\n  Multiple Python Threads \n\n\n\n\n\n\n  Integration with Ibis \n\n\n\n\n\n\n  Integration with Polars \n\n\n\n\n\n\n  Using fsspec Filesystems \n\n\n\n\n\n\n\n\n    SQL Features  \n\n\n\n\n\n  AsOf Join \n\n\n\n\n\n\n  Full-Text Search \n\n\n\n\n\n\n\n\n    SQL Editors  \n\n\n\n\n\n  DBeaver SQL IDE \n\n\n\n\n\n\n\n\n    Data Viewers  \n\n\n\n\n\n  Tableau \n\n\n\n\n\n\n  CLI Charting with YouPlot \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation  \n\n\n\n\n\n  Connect   \n\n\n\n    Data Import  \n\n\n\n\n\n  Overview \n\n\n\n\n\n\n    CSV Files \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   Auto Detection  \n\n\n\n\n\n\n   Reading Faulty CSV Files  \n\n\n\n\n\n\n   Tips  \n\n\n\n\n\n\n\n\n\n    JSON Files \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n\n\n\n    Multiple Files \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   Combining Schemas  \n\n\n\n\n\n\n\n\n\n    Parquet Files \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   Metadata  \n\n\n\n\n\n\n   Tips  \n\n\n\n\n\n\n\n\n\n    Partitioning \n\n\n\n\n\n\n\n   Hive Partitioning  \n\n\n\n\n\n\n   Partitioned Writes  \n\n\n\n\n\n\n\n\n\n  Appender \n\n\n\n\n\n\n  INSERT Statements \n\n\n\n\n\n\n\n\n    Client APIs  \n\n\n\n\n\n  Overview \n\n\n\n\n\n\n    C \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   Startup  \n\n\n\n\n\n\n   Configuration  \n\n\n\n\n\n\n   Query  \n\n\n\n\n\n\n   Data Chunks  \n\n\n\n\n\n\n   Values  \n\n\n\n\n\n\n   Types  \n\n\n\n\n\n\n   Prepared Statements  \n\n\n\n\n\n\n   Appender  \n\n\n\n\n\n\n   Table Functions  \n\n\n\n\n\n\n   Replacement Scans  \n\n\n\n\n\n\n   API Reference  \n\n\n\n\n\n\n\n\n\n  C++ \n\n\n\n\n\n\n    CLI \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   Arguments  \n\n\n\n\n\n\n   Dot Commands  \n\n\n\n\n\n\n   Output Formats  \n\n\n\n\n\n\n\n\n\n  Go \n\n\n\n\n\n\n  Java \n\n\n\n\n\n\n  Julia \n\n\n\n\n\n\n    Node.js \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   API Reference  \n\n\n\n\n\n\n\n\n\n    Python \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   Data Ingestion  \n\n\n\n\n\n\n   Result Conversion  \n\n\n\n\n\n\n   DB API  \n\n\n\n\n\n\n   Relational API  \n\n\n\n\n\n\n   Function API  \n\n\n\n\n\n\n   Types API  \n\n\n\n\n\n\n   Expression API  \n\n\n\n\n\n\n   Spark API  \n\n\n\n\n\n\n   API Reference  \n\n\n\n\n\n\n   Known Python Issues  \n\n\n\n\n\n\n\n\n\n  R \n\n\n\n\n\n\n  Rust \n\n\n\n\n\n\n  Swift \n\n\n\n\n\n\n    Wasm \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   Instantiation  \n\n\n\n\n\n\n   Data Ingestion  \n\n\n\n\n\n\n   Query  \n\n\n\n\n\n\n   Extensions  \n\n\n\n\n\n\n\n\n\n  ADBC \n\n\n\n\n\n\n    ODBC \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   Linux Setup  \n\n\n\n\n\n\n   Windows Setup  \n\n\n\n\n\n\n   MacOS Setup  \n\n\n\n\n\n\n\n\n\n\n\n    SQL  \n\n\n\n\n\n  Introduction \n\n\n\n\n\n\n    Statements \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   ALTER TABLE  \n\n\n\n\n\n\n   ALTER VIEW  \n\n\n\n\n\n\n   ATTACH/DETACH  \n\n\n\n\n\n\n   CALL  \n\n\n\n\n\n\n   CHECKPOINT  \n\n\n\n\n\n\n   COPY  \n\n\n\n\n\n\n   CREATE INDEX  \n\n\n\n\n\n\n   CREATE MACRO  \n\n\n\n\n\n\n   CREATE SCHEMA  \n\n\n\n\n\n\n   CREATE SEQUENCE  \n\n\n\n\n\n\n   CREATE TABLE  \n\n\n\n\n\n\n   CREATE VIEW  \n\n\n\n\n\n\n   CREATE TYPE  \n\n\n\n\n\n\n   DELETE  \n\n\n\n\n\n\n   DROP  \n\n\n\n\n\n\n   EXPORT/IMPORT DATABASE  \n\n\n\n\n\n\n   INSERT  \n\n\n\n\n\n\n   PIVOT  \n\n\n\n\n\n\n   Profiling  \n\n\n\n\n\n\n   SELECT  \n\n\n\n\n\n\n   SET/RESET  \n\n\n\n\n\n\n   Transaction Management  \n\n\n\n\n\n\n   UNPIVOT  \n\n\n\n\n\n\n   UPDATE  \n\n\n\n\n\n\n   USE  \n\n\n\n\n\n\n   VACUUM  \n\n\n\n\n\n\n\n\n\n    Query Syntax \n\n\n\n\n\n\n\n   SELECT  \n\n\n\n\n\n\n   FROM & JOIN  \n\n\n\n\n\n\n   WHERE  \n\n\n\n\n\n\n   GROUP BY  \n\n\n\n\n\n\n   GROUPING SETS  \n\n\n\n\n\n\n   HAVING  \n\n\n\n\n\n\n   ORDER BY  \n\n\n\n\n\n\n   LIMIT  \n\n\n\n\n\n\n   SAMPLE  \n\n\n\n\n\n\n   Unnesting  \n\n\n\n\n\n\n   WITH  \n\n\n\n\n\n\n   WINDOW  \n\n\n\n\n\n\n   QUALIFY  \n\n\n\n\n\n\n   VALUES  \n\n\n\n\n\n\n   FILTER  \n\n\n\n\n\n\n   Set Operations  \n\n\n\n\n\n\n   Prepared Statements  \n\n\n\n\n\n\n\n\n\n    Data Types \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   Array  \n\n\n\n\n\n\n   Bitstring  \n\n\n\n\n\n\n   Blob  \n\n\n\n\n\n\n   Boolean  \n\n\n\n\n\n\n   Date  \n\n\n\n\n\n\n   Enum  \n\n\n\n\n\n\n   Interval  \n\n\n\n\n\n\n   List  \n\n\n\n\n\n\n   Map  \n\n\n\n\n\n\n   NULL Values  \n\n\n\n\n\n\n   Numeric  \n\n\n\n\n\n\n   Struct  \n\n\n\n\n\n\n   Text  \n\n\n\n\n\n\n   Time  \n\n\n\n\n\n\n   Timestamp  \n\n\n\n\n\n\n   Time Zones  \n\n\n\n\n\n\n   Union  \n\n\n\n\n\n\n   Typecasting  \n\n\n\n\n\n\n\n\n\n    Expressions \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   CASE Statement  \n\n\n\n\n\n\n   Casting  \n\n\n\n\n\n\n   Collations  \n\n\n\n\n\n\n   Comparisons  \n\n\n\n\n\n\n   IN Operator  \n\n\n\n\n\n\n   Logical Operators  \n\n\n\n\n\n\n   Star Expression  \n\n\n\n\n\n\n   Subqueries  \n\n\n\n\n\n\n\n\n\n    Functions \n\n\n\n\n\n\n\n   Overview  \n\n\n\n\n\n\n   Bitstring Functions  \n\n\n\n\n\n\n   Blob Functions  \n\n\n\n\n\n\n   Date Format Functions  \n\n\n\n\n\n\n   Date Functions  \n\n\n\n\n\n\n   Date Part Functions  \n\n\n\n\n\n\n   Enum Functions  \n\n\n\n\n\n\n   Interval Functions  \n\n\n\n\n\n\n   Lambda Functions  \n\n\n\n\n\n\n   Nested Functions  \n\n\n\n\n\n\n   Numeric Functions  \n\n\n\n\n\n\n   Pattern Matching  \n\n\n\n\n\n\n   Text Functions  \n\n\n\n\n\n\n   Time Functions  \n\n\n\n\n\n\n   Timestamp Functions  \n\n\n\n\n\n\n   Timestamp with Time Zone Functions  \n\n\n\n\n\n\n   Utility Functions  \n\n\n\n\n\n\n\n\n\n  Aggregate Functions \n\n\n\n\n\n\n  Configuration \n\n\n\n\n\n\n  Constraints \n\n\n\n\n\n\n  Indexes \n\n\n\n\n\n\n  Information Schema \n\n\n\n\n\n\n  Metadata Functions \n\n\n\n\n\n\n  Pragmas \n\n\n\n\n\n\n  Rules for Case Sensitivity \n\n\n\n\n\n\n  Samples \n\n\n\n\n\n\n  Window Functions \n\n\n\n\n\n\n\n\n    Extensions  \n\n\n\n\n\n  Overview \n\n\n\n\n\n\n  Official Extensions \n\n\n\n\n\n\n  Working with Extensions \n\n\n\n\n\n\n  Arrow \n\n\n\n\n\n\n  AutoComplete \n\n\n\n\n\n\n  AWS \n\n\n\n\n\n\n  Azure \n\n\n\n\n\n\n  Excel \n\n\n\n\n\n\n  Full Text Search \n\n\n\n\n\n\n  httpfs \n\n\n\n\n\n\n  Iceberg \n\n\n\n\n\n\n  ICU \n\n\n\n\n\n\n  inet \n\n\n\n\n\n\n  jemalloc \n\n\n\n\n\n\n  JSON \n\n\n\n\n\n\n  MySQL \n\n\n\n\n\n\n  PostgreSQL \n\n\n\n\n\n\n  Spatial \n\n\n\n\n\n\n  SQLite \n\n\n\n\n\n\n  Substrait \n\n\n\n\n\n\n  TPC-DS \n\n\n\n\n\n\n  TPC-H \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Development  \n\n\n\n\n\n  DuckDB Repositories   \n\n\n\n    Testing  \n\n\n\n\n\n  Overview \n\n\n\n\n\n\n  sqllogictest \n\n\n\n\n\n\n  Debugging \n\n\n\n\n\n\n  Result Verification \n\n\n\n\n\n\n  Persistent \n\n\n\n\n\n\n  Loops \n\n\n\n\n\n\n  Multiple Connections \n\n\n\n\n\n\n  Catch \n\n\n\n\n\n\n\n\n  Internals Overview   \n\n\n\n  Storage Versions & Format   \n\n\n\n  Execution Format   \n\n\n\n  Profiling   \n\n\n\n  Release Dates   \n\n\n\n  Building   \n\n\n\n  Benchmark Suite   \n\n\n\n\n\n\n\n  Sitemap   \n\n\n\n\n\n  Why DuckDB   \n\n\n\n\n\n  Media   \n\n\n\n\n\n  FAQ   \n\n\n\n\n\n  Code of Conduct   \n\n\n\n\n\n  Live Demo   \n\n\n\n\n\n\n\n\n\n\n\n\n\nNode.js API\n\n\n\nPage Source\n\n\nReport Issue\n\n\nVersion dev\n\nVersion: \n\n\n\n\n\n\n\n\n\n\ndev\n\n\n\n\n\n\n\n0.9.2\n\n\n\n\n\n\n0.9.1\n\n\n\n\n\n\n0.9.0\n\n\n\n\n\n\n0.8.1\n\n\n\n\n\n\n0.7.1\n\n\n\n\n\n\n0.6.1\n\n\n\n\n\n\n0.5.1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis package provides a Node.js API for DuckDB.\nThe API for this client is somewhat compliant to the SQLite node.js client for easier transition.\n      \n        \n        Initializing\n        \n      \n    \n\nLoad the package and create a database object:\n\nconst duckdb = require('duckdb');\nconst db = new duckdb.Database(':memory:'); // or a file name for a persistent DB\n\n\nAll options as described on Database configuration can be (optionally) supplied to the Database constructor as second argument. The third argument can be optionally supplied to get feedback on the given options.\n\nconst db = new duckdb.Database(':memory:', {\n    \"access_mode\": \"READ_WRITE\",\n    \"max_memory\": \"512MB\",\n    \"threads\": \"4\"\n}, (err) => {\n  if (err) {\n    console.error(err);\n  }\n});\n\n      \n        \n        Running a Query\n        \n      \n    \n\nThe following code snippet runs a simple query using the Database.all() method.\n\ndb.all('SELECT 42 AS fortytwo', function(err, res) {\n  if (err) {\n    throw err;\n  }\n  console.log(res[0].fortytwo)\n});\n\n\nOther available methods are each, where the callback is invoked for each row, run to execute a single statement without results and exec, which can execute several SQL commands at once but also does not return results. All those commands can work with prepared statements, taking the values for the parameters as additional arguments. For example like so:\n\ndb.all('SELECT ?::INTEGER AS fortytwo, ?::STRING AS hello', 42, 'Hello, World', function(err, res) {\n  if (err) {\n    throw err;\n  }\n  console.log(res[0].fortytwo)\n  console.log(res[0].hello)\n});\n\n      \n        \n        Connections\n        \n      \n    \n\nA database can have multiple Connections, those are created using db.connect().\n\nconst con = db.connect();\n\n\nYou can create multiple connections, each with their own transaction context.\n\nConnection objects also contain shorthands to directly call run(), all() and each() with parameters and callbacks, respectively, for example:\n\ncon.all('SELECT 42 AS fortytwo', function(err, res) {\n  if (err) {\n    throw err;\n  }\n  console.log(res[0].fortytwo)\n});\n\n      \n        \n        Prepared Statements\n        \n      \n    \n\nFrom connections, you can create prepared statements (and only that) using con.prepare():\n\nconst stmt = con.prepare('SELECT ?::INTEGER AS fortytwo');\n\n\nTo execute this statement, you can call for example all() on the stmt object:\n\nstmt.all(42, function(err, res) {\n  if (err) {\n    throw err;\n  }\n  console.log(res[0].fortytwo)\n});\n\n\nYou can also execute the prepared statement multiple times. This is for example useful to fill a table with data:\n\ncon.run('CREATE TABLE a (i INTEGER)');\nconst stmt = con.prepare('INSERT INTO a VALUES (?)');\nfor (let i = 0; i < 10; i++) {\n  stmt.run(i);\n}\nstmt.finalize();\ncon.all('SELECT * FROM a', function(err, res) {\n  if (err) {\n    throw err;\n  }\n  console.log(res)\n});\n\n\nprepare() can also take a callback which gets the prepared statement as an argument:\n\nconst stmt = con.prepare('SELECT ?::INTEGER AS fortytwo', function(err, stmt) {\n  stmt.all(42, function(err, res) {\n    if (err) {\n      throw err;\n    }\n    console.log(res[0].fortytwo)\n  });\n});\n\n      \n        \n        Inserting Data via Arrow\n        \n      \n    \n\nApache Arrow can be used to insert data into DuckDB without making a copy:\n\nconst arrow = require('apache-arrow');\nconst db = new duckdb.Database(':memory:');\n\nconst jsonData = [\n  {\"userId\":1,\"id\":1,\"title\":\"delectus aut autem\",\"completed\":false},\n  {\"userId\":1,\"id\":2,\"title\":\"quis ut nam facilis et officia qui\",\"completed\":false}\n];\n\n// note; doesn't work on Windows yet\ndb.exec(`INSTALL arrow; LOAD arrow;`, (err) => {\n    if (err) {\n        throw err;\n    }\n\n    const arrowTable = arrow.tableFromJSON(jsonData);\n    db.register_buffer(\"jsonDataTable\", [arrow.tableToIPC(arrowTable)], true, (err, res) => {\n        if (err) {\n            throw err;\n        }\n\n        // `SELECT * FROM jsonDataTable` would return the entries in `jsonData`\n    });\n});\n\n      \n        \n        Loading Unsigned Extensions\n        \n      \n    \n\nTo load unsigned extensions, instantiate the database as follows:\n\ndb = new duckdb.Database(':memory:', {\"allow_unsigned_extensions\": \"true\"});\n\n      \n        \n        Pages in This Section\n        \n      \n\n\n\n\n\n\n\n\n\n\n\n\n\nSearch Shortcut cmd + k | ctrl + k\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
}