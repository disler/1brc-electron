{
  "url": "https://www.morling.dev/blog/one-billion-row-challenge/",
  "writePath": "/Users/ravix/Documents/projects/yt/1brc-poc/1brc-electron/data/one-billion-row-challenge.json",
  "title": "The One Billion Row Challenge - Gunnar Morling",
  "content": "\n\n\n\n\n\n\n\n\nGunnar Morling\nRandom Musings on All Things Software Engineering\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlog\n\n\n\nProjects\n\n\n\nConferences\n\n\n\nPodcasts\n\n\n\nAbout\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGunnar Morling\nRandom Musings on All Things Software Engineering\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlog\n\n\n\nProjects\n\n\n\nConferences\n\n\n\nPodcasts\n\n\n\nAbout\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwindow.addEventListener( \"load\", function () {\nconst urlParams = new URLSearchParams(window.location.search);\n\n\n\n\nconst form = document.getElementById( \"myForm\" );\n\nform.addEventListener(\"submit\", function (event) {\nevent.preventDefault();\nsendData(new FormData(form));\n});\n\nconst formMobile = document.getElementById( \"myFormMobile\" );\n\nformMobile.addEventListener(\"submit\", function (event) {\nevent.preventDefault();\nsendData(new FormData(formMobile));\n});\n});\n\n\n\n\n\nThe One Billion Row Challenge\nPosted at Jan 1, 2024\n\n\n\n\nUpdate Jan 4: Wow, this thing really took off!\n1BRC is discussed at a couple of places on the internet, including Hacker News, lobste.rs, and Reddit.\n\n\nFor folks to show-case non-Java solutions, there is a \"Show & Tell\" now, check that one out for 1BRC implementations in Rust, Go, C++, and others.\nSome interesting related write-ups include 1BRC in SQL with DuckDB by Robin Moffatt and 1 billion rows challenge in PostgreSQL and ClickHouse by Francesco Tisiot.\n\n\nThanks a lot for all the submissions, this is going way beyond what I‚Äôd have expected!\nI am behind a bit with evalutions due to the sheer amount of entries, I will work through them bit by bit.\nI have also made a few clarifications to the rules of the challenge; please make sure to read them before submitting any entries.\n\n\nLet‚Äôs kick off 2024 true coder style‚Äî‚ÄãI‚Äôm excited to announce the One Billion Row Challenge (1BRC), running from Jan 1 until Jan 31.\n\n\nYour mission, should you decide to accept it, is deceptively simple:\nwrite a Java program for retrieving temperature measurement values from a text file and calculating the min, mean, and max temperature per weather station.\nThere‚Äôs just one caveat: the file has 1,000,000,000 rows!\n\n\nThe text file has a simple structure with one measurement value per row:\n\n\n\n1\n2\n3\n4\n5\n6\nHamburg;12.0\nBulawayo;8.9\nPalembang;38.8\nSt. John's;15.2\nCracow;12.6\n...\n\n\n\n\nThe program should print out the min, mean, and max values per station, alphabetically ordered like so:\n\n\n\n1\n{Abha=5.0/18.0/27.4, Abidjan=15.7/26.0/34.1, Ab√©ch√©=12.1/29.4/35.6, Accra=14.7/26.4/33.1, Addis Ababa=2.1/16.0/24.3, Adelaide=4.1/17.3/29.7, ...}\n\n\n\n\nThe goal of the 1BRC challenge is to create the fastest implementation for this task,\nand while doing so, explore the benefits of modern Java and find out how far you can push this platform.\nSo grab all your (virtual) threads, reach out to the Vector API and SIMD, optimize your GC, leverage AOT compilation, or pull any other trick you can think of.\n\n\nThere‚Äôs a few simple rules of engagement for 1BRC\n(see here for more details):\n\n\n\n\nAny submission must be written in Java\n\n\nAny Java distribution available through SDKMan as well as early access builds from openjdk.net may be used, including EA builds for OpenJDK projects like Valhalla\n\n\nNo external dependencies may be used\n\n\n\n\nTo enter the challenge,\nclone the 1brc repository from GitHub and follow the instructions in the README file.\nThere is a very basic implementation of the task which you can use as a baseline for comparisons and to make sure that your own implementation emits the correct result.\nOnce you‚Äôre satisfied with your work, open a pull request against the upstream repo to submit your implementation to the challenge.\n\n\nAll submissions will be evaluated by running the program on a Hetzner Cloud CCX33 instance (8 dedicated vCPU, 32 GB RAM).\nThe time program is used for measuring execution times, i.e. end-to-end times are measured.\nEach contender will be run five times in a row.\nThe slowest and the fastest runs are discarded.\nThe mean value of the remaining three runs is the result for that contender and will be added to the leaderboard.\nIf you have any questions or would like to discuss any potential 1BRC optimization techniques,\nplease join the discussion in the GitHub repo.\n\n\nAs for a prize,\nby entering this challenge, you may learn something new, get to inspire others, and take pride in seeing your name listed in the scoreboard above.\nRumor has it that the winner may receive a unique 1Ô∏è‚É£üêùüèéÔ∏è t-shirt, too.\n\n\nSo don‚Äôt wait, join this challenge, and find out how fast Java can be‚Äî‚ÄãI‚Äôm really curious what the community will come up with for this one.\nHappy 2024, coder style!\n\n\n\n\n\n\n\n\n\n\nPlease enable JavaScript, or join the <a href=\"https://github.com/gunnarmorling/discussions.morling.dev/discussions/\">discussion on GitHub</a>.\n\n\n\n ¬© 2019 - 2023 Gunnar Morling |  Licensed Under Creative Commons BY-SA 4.0\n\n\nmediumZoom(document.querySelectorAll('div.imageblock > div.content > img'))\n\n\n\n\n"
}